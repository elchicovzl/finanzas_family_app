// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  image     String?
  emailVerified DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts     Account[]
  sessions     Session[]
  bankAccounts BankAccount[]
  budgets      Budget[]
  budgetTemplates BudgetTemplate[]
  familyMembers FamilyMember[]
  transactions Transaction[] // Para transacciones manuales
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model BankAccount {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  belvoAccountId    String?  @unique @map("belvo_account_id")
  institutionName   String   @map("institution_name")
  accountNumber     String   @map("account_number")
  accountType       String   @map("account_type")
  balance           Decimal  @db.Decimal(12, 2)
  currency          String   @default("COP")
  isActive          Boolean  @default(true) @map("is_active")
  belvoLinkId       String?  @map("belvo_link_id")
  lastSyncAt        DateTime? @map("last_sync_at")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("bank_accounts")
}

model Transaction {
  id                  String   @id @default(cuid())
  accountId           String?  @map("account_id")  // Opcional para transacciones manuales
  belvoTransactionId  String?  @unique @map("belvo_transaction_id")
  amount              Decimal  @db.Decimal(12, 2)
  description         String
  categoryId          String?  @map("category_id")
  customCategory      String?  @map("custom_category")
  date                DateTime
  type                TransactionType
  source              TransactionSource @default(MANUAL) // Nuevo campo
  reference           String?
  merchantInfo        String?  @map("merchant_info")
  tags                String[] @default([])
  isRecurring         Boolean  @default(false) @map("is_recurring")
  recurringGroupId    String?  @map("recurring_group_id")
  userId              String   @map("user_id") // Para transacciones manuales sin cuenta espec√≠fica
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  account  BankAccount? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category Category?    @relation(fields: [categoryId], references: [id])
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  color       String   @default("#6B7280")
  icon        String   @default("üìù")
  isCustom    Boolean  @default(false) @map("is_custom")
  parentId    String?  @map("parent_id")
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  parent       Category?     @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     Category[]    @relation("CategoryHierarchy")
  transactions Transaction[]
  budgets      Budget[]
  budgetTemplates BudgetTemplate[]

  @@map("categories")
}

model Budget {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  categoryId   String   @map("category_id")
  name         String
  monthlyLimit Decimal  @db.Decimal(12, 2) @map("monthly_limit")
  currentSpent Decimal  @default(0) @db.Decimal(12, 2) @map("current_spent")
  period       BudgetPeriod @default(MONTHLY)
  startDate    DateTime @map("start_date")
  endDate      DateTime? @map("end_date")
  alertThreshold Decimal? @db.Decimal(5, 2) @map("alert_threshold")
  isActive     Boolean  @default(true) @map("is_active")
  templateId   String?  @map("template_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category       @relation(fields: [categoryId], references: [id])
  template BudgetTemplate? @relation(fields: [templateId], references: [id])

  @@unique([userId, categoryId, startDate])
  @@map("budgets")
}

model BudgetTemplate {
  id             String       @id @default(cuid())
  userId         String       @map("user_id")
  categoryId     String       @map("category_id")
  name           String
  monthlyLimit   Decimal      @db.Decimal(12, 2) @map("monthly_limit")
  period         BudgetPeriod @default(MONTHLY)
  alertThreshold Decimal?     @db.Decimal(5, 2) @map("alert_threshold")
  isActive       Boolean      @default(true) @map("is_active")
  autoGenerate   Boolean      @default(true) @map("auto_generate")
  lastGenerated  DateTime?    @map("last_generated")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])
  budgets  Budget[]

  @@unique([userId, categoryId])
  @@map("budget_templates")
}

model FamilyMember {
  id       String           @id @default(cuid())
  userId   String           @map("user_id")
  familyId String           @map("family_id")
  role     FamilyMemberRole @default(MEMBER)
  joinedAt DateTime         @default(now()) @map("joined_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, familyId])
  @@map("family_members")
}

model SavingsGoal {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  name        String
  description String?
  targetAmount Decimal @db.Decimal(12, 2) @map("target_amount")
  currentAmount Decimal @default(0) @db.Decimal(12, 2) @map("current_amount")
  targetDate  DateTime? @map("target_date")
  priority    GoalPriority @default(MEDIUM)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("savings_goals")
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum TransactionSource {
  BELVO      // Transacciones importadas de Belvo
  MANUAL     // Transacciones agregadas manualmente
  PLAID      // Para futuro soporte de Plaid
  CSV_IMPORT // Para importaci√≥n por CSV
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum FamilyMemberRole {
  ADMIN
  MEMBER
  VIEWER
}

enum GoalPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
